{"version":3,"sources":["home/home.js","discussion/discussion.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","username","handleChange","bind","event","this","setState","target","value","className","Container","maxWidth","Card","CardContent","Avatar","Input","type","id","onChange","to","Button","variant","color","Component","Discussion","message","messages","chat","handleSubmit","tmessages","push","match","params","Paper","map","i","onSubmit","Router","basename","exact","path","component","home","discussion","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a1ba17c6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport \"./home.scss\";\r\nimport { Card, CardContent, Container, Avatar, TextField, Button, Input } from '@material-ui/core';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n\r\n        };\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ username: event.target.value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='main'>\r\n                <Container maxWidth=\"md\">\r\n                    <h1>Anonymous Discussion!</h1>\r\n                </Container>\r\n                <Card className=\"Card\">\r\n                    <CardContent className=\"content\">\r\n                        <div className=\"greeting\">Enter a Username to get Started</div>\r\n                        <div><Avatar className=\"avatar\"></Avatar></div>\r\n                        <form className=\"form\">\r\n                            <Input type=\"text\" value={this.state.username} id=\"inputText\" onChange={this.handleChange} />\r\n                            <Link to={`${this.state.username}`}><Button className=\"Submit\" type=\"submit\" value=\"Submit\" variant=\"contained\" color=\"primary\"> Submit </Button></Link>\r\n                        </form>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport \"./discussion.scss\";\r\nimport { Card, CardContent, Paper, Container, Avatar, TextField, Button, Input } from '@material-ui/core';\r\n\r\nclass Discussion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: '',\r\n            messages: [\r\n                {\r\n                    username: '',\r\n                    chat: ''\r\n                }\r\n            ],\r\n\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ message: event.target.value })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        const tmessages = this.state.messages;\r\n        tmessages.push({ username: this.props.match.params.username, chat: this.state.message });\r\n        this.setState({ messages: tmessages })\r\n        this.setState({ message: \"\" })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='main'>\r\n                <Container maxWidth=\"lg\">\r\n                    <h1>Anonymous Discussion!</h1>\r\n                    <div className=\"paper\"> <Paper variant=\"outlined\" className=\"paper\">\r\n                        {this.state.messages.map(i => {\r\n                            return (\r\n                                <div className=\"chat\">\r\n                                    <div className=\"Avatar\"></div>\r\n                                    <div className=\"text\">\r\n                                        <div className=\"username\"> {i.username} </div>\r\n                                        <div className=\"chatText\"> {i.chat} </div> </div>\r\n                                </div>)\r\n                        })}\r\n                        <form className=\"form\" onSubmit={this.handleSubmit}>\r\n                            <div><Input type=\"text\" value={this.state.message} id=\"inputText\" onChange={this.handleChange} /></div>\r\n                            <Button className=\"Submit\" type=\"submit\" value=\"Submit\" variant=\"contained\" color=\"primary\"> Submit </Button>\r\n                        </form>\r\n                    </Paper> </div>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Discussion;\r\n","import React from 'react';\nimport { BrowserRouter, Route, Switch,HashRouter } from \"react-router-dom\";\nimport home from \"./home/home\"\nimport discussion from \"./discussion/discussion\"\nimport './App.css';\n\nconst Router = () => (\n  <HashRouter basename='/'>\n    <Switch>\n      <Route exact path=\"/\" component={home} />\n      <Route exact path=\"/:username\" component={discussion} />\n    </Switch>\n  </HashRouter>\n)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}