{"version":3,"sources":["discussion/discussion.js","home/home.js","App.js","serviceWorker.js","index.js"],"names":["socket","Home","props","state","username","roomno","handleChangeusername","bind","handleChangeroomno","event","this","setState","target","value","className","Container","maxWidth","Card","CardContent","Avatar","InputGroup","type","id","onChange","Prepend","Text","FormControl","placeholder","aria-label","aria-describedby","to","Button","variant","Component","Discussion","isloading","endpoint","message","messages","chat","handleChange","handleSubmit","socketIOClient","connect","on","data","a","tmessages","push","params","match","emit","chats","objDiv","document","getElementById","scrollTop","scrollHeight","nmessage","Paper","Spinner","animation","map","i","Append","onClick","Router","basename","exact","path","component","home","discussion","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c0da6bbd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./discussion.scss\";\nimport socketIOClient from \"socket.io-client\";\nimport { Paper, Container } from '@material-ui/core';\nimport { Button, InputGroup, FormControl, Spinner } from 'react-bootstrap';\n\nvar socket;\n\nclass Discussion extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isloading: true,\n            endpoint: 'https://anonymous-project-backend.herokuapp.com/',\n            message: '',\n            messages: [\n                {\n                    username: '',\n                    chat: '',\n                    roomno: ''\n                }\n            ],\n\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        socket = socketIOClient.connect(this.state.endpoint)\n        socket.on('newChat', async (data) => {\n            var tmessages = this.state.messages;\n            tmessages.push({ username: data.username, chat: data.chat })\n            this.setState({ messages: tmessages });\n        })\n\n    }\n\n    componentDidMount() {\n        const { match: { params } } = this.props;\n        socket.on('connect', function () {\n            socket.emit('room', params.roomno);\n        });\n        socket.on('chats', (chats) => {\n            this.setState({ messages: chats });\n            this.setState({isloading:false})\n        })\n    }\n\n    componentDidUpdate() {\n        const objDiv = document.getElementById('chatscroll');\n        objDiv.scrollTop = objDiv.scrollHeight;\n    }\n\n    handleChange(event) {\n        this.setState({ message: event.target.value })\n    }\n\n    handleSubmit(event) {\n        var nmessage = { username: this.props.match.params.username, chat: this.state.message, roomno: this.props.match.params.roomno }\n        socket.emit(\"newMessage\", nmessage);\n        this.setState({ message: \"\" })\n    }\n\n    render() {\n        return (\n            <div className='main'>\n                <Container maxWidth=\"lg\">\n                    <h1>Anonymous Discussion!</h1>\n                    <div> <Paper variant=\"outlined\" className=\"paper\" id=\"chatscroll\">\n                        {this.state.isloading ? <Spinner animation=\"border\" variant=\"primary\" variant=\"primary\" className=\"spinner\"/> : this.state.messages.map(i => {\n                            return (\n                                <div className=\"chat\">\n                                    <div className=\"Avatar\"></div>\n                                    <div className=\"text\">\n                                        <div className=\"username\"> {i.username} </div>\n                                        <div className=\"chatText\"> {i.chat} </div> </div>\n                                </div>)\n                        })}\n                    </Paper> </div>\n                    <form>\n                        <InputGroup className=\"mb-3\">\n                            <FormControl\n                                value={this.state.message}\n                                onChange={this.handleChange}\n                                placeholder=\"Chat Message\"\n                                aria-label=\"Recipient's username\"\n                                aria-describedby=\"basic-addon2\"\n                            />\n                            <InputGroup.Append>\n                                <Button variant=\"outline-secondary\" onClick={this.handleSubmit} className=\"submit\" type=\"submit\">Submit</Button>\n                            </InputGroup.Append>\n                        </InputGroup>\n                    </form>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default Discussion;\n","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport \"./home.scss\";\nimport { Card, CardContent, Container, Avatar} from '@material-ui/core';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, InputGroup, FormControl } from 'react-bootstrap';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            roomno: ''\n\n        };\n        this.handleChangeusername = this.handleChangeusername.bind(this)\n        this.handleChangeroomno = this.handleChangeroomno.bind(this);\n    }\n\n    handleChangeusername(event) {\n        this.setState({ username: event.target.value })\n    }\n    handleChangeroomno(event) {\n        this.setState({ roomno: event.target.value })\n    }\n\n    render() {\n        return (\n            <div className='main'>\n                <Container maxWidth=\"md\">\n                    <h1>Anonymous Discussion!</h1>\n                </Container>\n                <Card className=\"Card\">\n                    <CardContent className=\"content\">\n                        <div className=\"greeting\">Let's Get Started!</div>\n                        <div><Avatar className=\"avatar\"></Avatar></div>\n                        <form className=\"form\">\n                            <InputGroup className=\"mb-3\" type=\"text\" value={this.state.username} id=\"inputText\" onChange={this.handleChangeusername}>\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <FormControl\n                                    placeholder=\"Username\"\n                                    aria-label=\"Username\"\n                                    aria-describedby=\"basic-addon1\"\n                                />\n                            </InputGroup>\n                            <InputGroup className=\"mb-3\" type=\"text\" value={this.state.roomno} id=\"inputText\" onChange={this.handleChangeroomno}>\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text id=\"basic-addon1\">#</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <FormControl\n                                    placeholder=\"RoomID\"\n                                    aria-label=\"Username\"\n                                    aria-describedby=\"basic-addon1\"\n                                />\n                            </InputGroup>\n                            <Link to={`${this.state.username}/${this.state.roomno}`}><Button className=\"Submit\" type=\"submit\" value=\"Submit\" variant=\"primary\"> Submit </Button></Link>\n                        </form>\n                    </CardContent>\n                </Card>\n                <Container maxWidth=\"md\">\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport {Route, Switch,HashRouter } from \"react-router-dom\";\nimport home from \"./home/home\"\nimport discussion from \"./discussion/discussion\"\nimport './App.css';\n\nconst Router = () => (\n  <HashRouter basename='/'>\n    <Switch>\n      <Route exact path=\"/\" component={home} />\n      <Route exact path=\"/:username/:roomno\" component={discussion} />\n    </Switch>\n  </HashRouter>\n)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}