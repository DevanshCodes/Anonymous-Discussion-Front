{"version":3,"sources":["discussion/discussion.js","home/home.js","App.js","serviceWorker.js","index.js"],"names":["socket","Home","props","state","username","roomno","handleChangeusername","bind","handleChangeroomno","event","this","setState","target","value","className","Container","maxWidth","Card","CardContent","Avatar","InputGroup","type","id","onChange","Prepend","Text","FormControl","placeholder","aria-label","aria-describedby","to","Button","variant","Component","Discussion","endpoint","message","messages","chat","handleChange","handleSubmit","socketIOClient","connect","on","data","a","tmessages","push","params","match","emit","chats","objDiv","document","getElementById","scrollTop","scrollHeight","nmessage","Paper","map","i","Append","onClick","Router","basename","exact","path","component","home","discussion","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.300b8bd2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./discussion.scss\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { Paper, Container } from '@material-ui/core';\r\nimport { Button, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nvar socket;\r\n\r\nclass Discussion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            endpoint: 'https://anonymous-project-backend.herokuapp.com/',\r\n            message: '',\r\n            messages: [\r\n                {\r\n                    username: '',\r\n                    chat: '',\r\n                    roomno: ''\r\n                }\r\n            ],\r\n\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        socket = socketIOClient.connect(this.state.endpoint)\r\n        socket.on('newChat', async (data) => {\r\n            var tmessages = this.state.messages;\r\n            tmessages.push({ username: data.username, chat: data.chat })\r\n            this.setState({ messages: tmessages });\r\n        })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { match: { params } } = this.props;\r\n        socket.on('connect', function () {\r\n            socket.emit('room', params.roomno);\r\n        });\r\n        socket.on('chats', (chats) => {\r\n            this.setState({ messages: chats });\r\n        })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const objDiv = document.getElementById('chatscroll');\r\n        objDiv.scrollTop = objDiv.scrollHeight;\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ message: event.target.value })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        var nmessage = { username: this.props.match.params.username, chat: this.state.message, roomno: this.props.match.params.roomno }\r\n        socket.emit(\"newMessage\", nmessage);\r\n        this.setState({ message: \"\" })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='main'>\r\n                <Container maxWidth=\"lg\">\r\n                    <h1>Anonymous Discussion!</h1>\r\n                    <div> <Paper variant=\"outlined\" className=\"paper\" id=\"chatscroll\">\r\n                        {this.state.messages.map(i => {\r\n                            return (\r\n                                <div className=\"chat\">\r\n                                    <div className=\"Avatar\"></div>\r\n                                    <div className=\"text\">\r\n                                        <div className=\"username\"> {i.username} </div>\r\n                                        <div className=\"chatText\"> {i.chat} </div> </div>\r\n                                </div>)\r\n                        })}\r\n                    </Paper> </div>\r\n                    <form>\r\n                        <InputGroup className=\"mb-3\">\r\n                            <FormControl\r\n                                value={this.state.message}\r\n                                onChange={this.handleChange}\r\n                                placeholder=\"Chat Message\"\r\n                                aria-label=\"Recipient's username\"\r\n                                aria-describedby=\"basic-addon2\"\r\n                            />\r\n                            <InputGroup.Append>\r\n                                <Button variant=\"outline-secondary\" onClick={this.handleSubmit} className=\"submit\" type=\"submit\">Submit</Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </form>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Discussion;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport \"./home.scss\";\r\nimport { Card, CardContent, Container, Avatar, Input } from '@material-ui/core';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            roomno: ''\r\n\r\n        };\r\n        this.handleChangeusername = this.handleChangeusername.bind(this)\r\n        this.handleChangeroomno = this.handleChangeroomno.bind(this);\r\n    }\r\n\r\n    handleChangeusername(event) {\r\n        this.setState({ username: event.target.value })\r\n    }\r\n    handleChangeroomno(event) {\r\n        this.setState({ roomno: event.target.value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='main'>\r\n                <Container maxWidth=\"md\">\r\n                    <h1>Anonymous Discussion!</h1>\r\n                </Container>\r\n                <Card className=\"Card\">\r\n                    <CardContent className=\"content\">\r\n                        <div className=\"greeting\">Let's Get Started!</div>\r\n                        <div><Avatar className=\"avatar\"></Avatar></div>\r\n                        <form className=\"form\">\r\n                            <InputGroup className=\"mb-3\" type=\"text\" value={this.state.username} id=\"inputText\" onChange={this.handleChangeusername}>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl\r\n                                    placeholder=\"Username\"\r\n                                    aria-label=\"Username\"\r\n                                    aria-describedby=\"basic-addon1\"\r\n                                />\r\n                            </InputGroup>\r\n                            <InputGroup className=\"mb-3\" type=\"text\" value={this.state.roomno} id=\"inputText\" onChange={this.handleChangeroomno}>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"basic-addon1\">#</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl\r\n                                    placeholder=\"RoomID\"\r\n                                    aria-label=\"Username\"\r\n                                    aria-describedby=\"basic-addon1\"\r\n                                />\r\n                            </InputGroup>\r\n                            <Link to={`${this.state.username}/${this.state.roomno}`}><Button className=\"Submit\" type=\"submit\" value=\"Submit\" variant=\"primary\"> Submit </Button></Link>\r\n                        </form>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport {Route, Switch,HashRouter } from \"react-router-dom\";\nimport home from \"./home/home\"\nimport discussion from \"./discussion/discussion\"\nimport './App.css';\n\nconst Router = () => (\n  <HashRouter basename='/'>\n    <Switch>\n      <Route exact path=\"/\" component={home} />\n      <Route exact path=\"/:username/:roomno\" component={discussion} />\n    </Switch>\n  </HashRouter>\n)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}